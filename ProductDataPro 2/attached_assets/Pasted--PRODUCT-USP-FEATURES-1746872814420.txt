# ===========================================================================
# PRODUCT USP FEATURES & IMPLEMENTATION GUIDE
# ===========================================================================

"""
UNIQUE SELLING PROPOSITION FEATURES:

1. INTELLIGENT PRODUCT RECOGNITION
   - Identifies product type, category, and attributes from minimal data
   - Understands product relationships and hierarchies
   - Recognizes variations, models, and product families

2. MARKETPLACE-SPECIFIC OPTIMIZATION
   - Platform-specific content formatting (Amazon vs Shopify vs Etsy)
   - Algorithm-aware keyword optimization for each marketplace
   - Policy compliance checking for each platform

3. HUMAN-QUALITY CONTENT GENERATION
   - Natural language product descriptions that convert
   - SEO-optimized titles that don't sound keyword-stuffed
   - Persuasive bullet points highlighting key benefits and features

4. LISTING QUALITY ANALYSIS
   - Competitiveness scoring against similar marketplace listings
   - Content uniqueness verification
   - Search ranking potential estimation

5. BATCH PROCESSING CAPABILITIES
   - Handle multiple products simultaneously
   - Consistent brand voice across product variations
   - Bulk export in platform-ready formats

# ===========================================================================
# EXACT OPEN ROUTER API IMPLEMENTATION
# ===========================================================================

# Core function for making OpenRouter API calls with proper error handling
import openrouter
import json
import time
import pandas as pd
from typing import Dict, List, Any, Optional

# Set your OpenRouter API key
openrouter.api_key = "your_openrouter_api_key"  # Replace with environment variable

def call_openrouter_api(prompt: str, model: str = "anthropic/claude-3-5-sonnet", 
                         max_retries: int = 3, json_mode: bool = True) -> Dict[str, Any]:
    """
    Make a call to OpenRouter API with retry logic and proper error handling
    
    Args:
        prompt: The prompt to send to the API
        model: The model to use (default: claude-3-5-sonnet)
        max_retries: Maximum number of retries on failure
        json_mode: Whether to request JSON response format
    
    Returns:
        API response content or error message
    """
    retries = 0
    while retries <= max_retries:
        try:
            messages = [{"role": "user", "content": prompt}]
            
            # Set up the API call
            kwargs = {
                "model": model,
                "messages": messages,
            }
            
            # Add JSON mode if requested
            if json_mode:
                kwargs["response_format"] = {"type": "json_object"}
            
            # Make the API call
            response = openrouter.chat.completions.create(**kwargs)
            
            # Extract and return the content
            content = response.choices[0].message.content
            
            # Parse JSON if in json_mode
            if json_mode:
                try:
                    return json.loads(content)
                except json.JSONDecodeError:
                    print(f"Warning: Received non-JSON response in JSON mode: {content[:100]}...")
                    # Return as text if JSON parsing fails
                    return {"error": "JSON parsing failed", "raw_content": content}
            
            return {"content": content}
            
        except Exception as e:
            retries += 1
            if retries > max_retries:
                print(f"Error after {max_retries} retries: {str(e)}")
                return {"error": str(e)}
            
            # Exponential backoff
            wait_time = 2 ** retries
            print(f"API call failed, retrying in {wait_time} seconds...")
            time.sleep(wait_time)

# ===========================================================================
# FEATURE 1: PRODUCT TYPE DETECTION
# ===========================================================================

def detect_product_type(df: pd.DataFrame) -> Dict[str, Any]:
    """
    Detect product type from CSV data using OpenRouter API
    
    Args:
        df: Pandas DataFrame containing product data
    
    Returns:
        Dictionary with product analysis information
    """
    # Sample data to send (first 3 rows, limited columns)
    sample_cols = min(10, len(df.columns))
    sample = df.iloc[:3, :sample_cols].to_dict(orient='records')
    
    # Create a prompt with column names and sample data
    column_info = "Column names: " + ", ".join(df.columns[:sample_cols])
    sample_data = json.dumps(sample, indent=2)
    
    prompt = f"""
    As an AI product specialist, analyze this product data and determine what products are being listed.
    
    {column_info}
    
    Sample data:
    {sample_data}
    
    Analyze this data and provide the following information in JSON format:
    1. What specific product type is this? (Be precise, not just broad categories)
    2. What marketplace category would these products belong to?
    3. What are the key features or attributes of these products?
    4. What target audience would these products appeal to?
    
    Return your analysis as a JSON object with these fields:
    - product_type: The specific product type
    - category: Primary category these would be listed under
    - subcategory: More specific subcategory
    - key_features: Array of important product features identified
    - target_audience: Who would buy these products
    - confidence: Your confidence in this analysis (0.0-1.0)
    """
    
    result = call_openrouter_api(prompt)
    return result

# ===========================================================================
# FEATURE 2: MISSING FIELD DETECTION
# ===========================================================================

def detect_missing_fields(df: pd.DataFrame, marketplace: str) -> Dict[str, Any]:
    """
    Identify missing fields required for the specified marketplace
    
    Args:
        df: Pandas DataFrame containing product data
        marketplace: Target marketplace (amazon, shopify, etsy)
    
    Returns:
        Dictionary with missing fields and importance levels
    """
    # Get column names
    existing_columns = list(df.columns)
    
    prompt = f"""
    As an e-commerce specialist for {marketplace.title()}, analyze these existing product data fields and identify what important fields are missing for a complete {marketplace.title()} listing.
    
    Existing fields:
    {', '.join(existing_columns)}
    
    For {marketplace.title()} specifically, determine:
    1. Which required fields are missing
    2. Which recommended (but optional) fields are missing
    3. The importance of each missing field (critical, high, medium, low)
    
    Consider these marketplace-specific requirements:
    - Amazon: Title, Brand, Description, Bullet Points, Keywords, Category, Images, Price
    - Shopify: Title, Body HTML, Vendor, Product Type, Tags, Collections, Variants, Price
    - Etsy: Title, Description, Price, Quantity, Tags, Materials, Who Made, When Made
    
    Return a JSON object with:
    - required_missing: Array of missing fields that are required by {marketplace.title()}
    - recommended_missing: Array of missing fields that are recommended but optional
    - field_importance: Object mapping each field to its importance level
    - marketplace_specific: Any special notes about {marketplace.title()} requirements
    """
    
    result = call_openrouter_api(prompt)
    return result

# ===========================================================================
# FEATURE 3: PRODUCT DESCRIPTION GENERATION
# ===========================================================================

def generate_product_description(product_data: Dict[str, Any], marketplace: str, 
                                product_analysis: Dict[str, Any]) -> Dict[str, Any]:
    """
    Generate a high-quality product description optimized for the target marketplace
    
    Args:
        product_data: Dictionary containing existing product data
        marketplace: Target marketplace (amazon, shopify, etsy)
        product_analysis: Product type analysis from detect_product_type
    
    Returns:
        Dictionary with generated description
    """
    # Extract relevant product info
    product_type = product_analysis.get('product_type', 'product')
    category = product_analysis.get('category', '')
    features = product_analysis.get('key_features', [])
    audience = product_analysis.get('target_audience', '')
    
    # Combine existing product data
    product_info = "\n".join([f"{k}: {v}" for k, v in product_data.items() if v and pd.notna(v)])
    
    prompt = f"""
    You are an expert e-commerce copywriter specializing in {marketplace} listings. 
    Write a persuasive, high-converting product description for this {product_type}.

    PRODUCT INFORMATION:
    {product_info}
    
    PRODUCT TYPE: {product_type}
    CATEGORY: {category}
    KEY FEATURES: {', '.join(features) if isinstance(features, list) else features}
    TARGET AUDIENCE: {audience}
    
    Your description should:
    1. Open with a compelling hook that emphasizes the main benefit
    2. Use natural, conversational language that doesn't sound AI-generated
    3. Highlight key features and their benefits to the customer
    4. Include specific details about the product where available
    5. Format in 2-3 short, scannable paragraphs
    6. Incorporate relevant keywords naturally
    7. Match the tone and style common on {marketplace}
    8. Be 150-250 words in length
    
    For {marketplace} specifically:
    - Amazon: Focus on features and specifications, use factual language
    - Shopify: Focus on brand story and lifestyle benefits
    - Etsy: Emphasize handmade/unique aspects and materials
    
    DO NOT:
    - Use obvious AI patterns like "introducing" or "perfect for"
    - Include generic filler text or marketing clichés
    - Mention pricing, shipping or return policies
    - Start sentences with "This product..."
    - Create an obviously templated structure
    
    Return a JSON object with:
    - description: The complete product description
    - word_count: Number of words in the description
    - key_points: Array of main selling points highlighted
    """
    
    result = call_openrouter_api(prompt)
    return result

# ===========================================================================
# FEATURE 4: PRODUCT TITLE OPTIMIZATION
# ===========================================================================

def generate_product_title(product_data: Dict[str, Any], marketplace: str,
                         product_analysis: Dict[str, Any]) -> Dict[str, Any]:
    """
    Generate an optimized product title for the target marketplace
    
    Args:
        product_data: Dictionary containing existing product data
        marketplace: Target marketplace (amazon, shopify, etsy)
        product_analysis: Product type analysis from detect_product_type
    
    Returns:
        Dictionary with generated title options
    """
    # Extract relevant product info
    product_type = product_analysis.get('product_type', 'product')
    category = product_analysis.get('category', '')
    
    # Combine existing product data
    product_info = "\n".join([f"{k}: {v}" for k, v in product_data.items() if v and pd.notna(v)])
    
    # Character limits by marketplace
    limits = {
        'amazon': 200,
        'shopify': 120,
        'etsy': 140
    }
    char_limit = limits.get(marketplace.lower(), 150)
    
    prompt = f"""
    As an SEO specialist for {marketplace}, create 3 optimized product titles for this {product_type}.
    
    PRODUCT INFORMATION:
    {product_info}
    
    PRODUCT TYPE: {product_type}
    CATEGORY: {category}
    
    Your titles must:
    1. Stay under {char_limit} characters (strict limit for {marketplace})
    2. Include the most important keywords early in the title
    3. Follow {marketplace}'s title structure best practices
    4. Maintain readability while being search-optimized
    5. Include brand, product type, and key distinguishing features
    
    {marketplace}-specific guidance:
    - Amazon: Format as "Brand + Product Type + Key Features + Size/Color/Quantity"
    - Shopify: Format as "Product Type + Key Benefit + Brand"
    - Etsy: Format as "Descriptive + Product Type + Unique Selling Point"
    
    DO NOT:
    - Use ALL CAPS (except for established acronyms like "USB")
    - Include promotional phrases or special characters
    - Keyword-stuff to the point of unreadability
    - Exceed the character limit under any circumstances
    
    Return a JSON object with:
    - title_options: Array of 3 different title options
    - character_counts: Array of character counts for each title
    - marketplace_format: Whether each title follows {marketplace} best practices
    """
    
    result = call_openrouter_api(prompt)
    return result

# ===========================================================================
# FEATURE 5: BULLET POINTS GENERATION
# ===========================================================================

def generate_bullet_points(product_data: Dict[str, Any], marketplace: str,
                         product_analysis: Dict[str, Any]) -> Dict[str, Any]:
    """
    Generate optimized bullet points for the target marketplace
    
    Args:
        product_data: Dictionary containing existing product data
        marketplace: Target marketplace (amazon, shopify, etsy)
        product_analysis: Product type analysis from detect_product_type
    
    Returns:
        Dictionary with generated bullet points
    """
    # Extract relevant product info
    product_type = product_analysis.get('product_type', 'product')
    features = product_analysis.get('key_features', [])
    
    # Combine existing product data
    product_info = "\n".join([f"{k}: {v}" for k, v in product_data.items() if v and pd.notna(v)])
    
    prompt = f"""
    As an e-commerce specialist for {marketplace}, create compelling, high-converting bullet points for this {product_type}.
    
    PRODUCT INFORMATION:
    {product_info}
    
    PRODUCT TYPE: {product_type}
    KEY FEATURES: {', '.join(features) if isinstance(features, list) else features}
    
    Create 5 persuasive bullet points that:
    1. Lead with a clear customer benefit, followed by the feature that delivers it
    2. Use varied sentence structures (not following an obvious pattern)
    3. Include specific measurements, materials, or specifications where relevant
    4. Highlight the most important selling points of the product
    5. Follow {marketplace}'s specific bullet point best practices
    
    {marketplace}-specific guidance:
    - Amazon: Use all caps for the first few words as a headline, then describe the benefit
    - Shopify: Focus on key benefits in a more conversational tone
    - Etsy: Emphasize unique aspects, materials, and craftsmanship
    
    DO NOT:
    - Make all bullet points follow the same obvious template
    - Exceed 100 characters per bullet point (ideally 80-100)
    - Include promotional language or shipping/warranty info
    - Repeat information already in the title
    - Make unsubstantiated claims
    
    Return a JSON object with:
    - bullet_points: Array of 5 bullet points
    - character_counts: Array of character counts for each bullet
    - key_benefits: Array of the main benefits highlighted
    """
    
    result = call_openrouter_api(prompt)
    return result

# ===========================================================================
# FEATURE 6: CSV ENHANCEMENT PIPELINE
# ===========================================================================

def enhance_product_listings(csv_data: str, marketplace: str) -> pd.DataFrame:
    """
    Complete pipeline to enhance product listings from CSV data
    
    Args:
        csv_data: CSV data as string
        marketplace: Target marketplace (amazon, shopify, etsy)
    
    Returns:
        Enhanced pandas DataFrame
    """
    # Parse CSV
    df = pd.read_csv(pd.StringIO(csv_data))
    
    # Detect product type
    product_analysis = detect_product_type(df)
    
    # Detect missing fields
    missing_fields = detect_missing_fields(df, marketplace)
    
    # Create enhanced DataFrame
    enhanced_df = df.copy()
    
    # Process each row
    for index, row in df.iterrows():
        product_data = row.to_dict()
        
        # Generate missing fields
        if 'description' not in df.columns or pd.isna(row['description']):
            desc_result = generate_product_description(product_data, marketplace, product_analysis)
            if 'description' in desc_result:
                enhanced_df.at[index, 'description'] = desc_result['description']
        
        if 'title' not in df.columns or pd.isna(row['title']):
            title_result = generate_product_title(product_data, marketplace, product_analysis)
            if 'title_options' in title_result and title_result['title_options']:
                enhanced_df.at[index, 'title'] = title_result['title_options'][0]
        
        if 'bullet_points' not in df.columns or pd.isna(row['bullet_points']):
            bullet_result = generate_bullet_points(product_data, marketplace, product_analysis)
            if 'bullet_points' in bullet_result:
                enhanced_df.at[index, 'bullet_points'] = json.dumps(bullet_result['bullet_points'])
    
    return enhanced_df

# ===========================================================================
# IMPLEMENTATION IN YOUR FLASK/FASTAPI APPLICATION
# ===========================================================================

# Example route for your Flask/FastAPI application
from flask import Flask, request, jsonify
import io

app = Flask(__name__)

@app.route('/api/enhance-csv', methods=['POST'])
def enhance_csv():
    if 'file' not in request.files:
        return jsonify({"error": "No file part"}), 400
    
    file = request.files['file']
    marketplace = request.form.get('marketplace', 'amazon')
    
    if file.filename == '':
        return jsonify({"error": "No selected file"}), 400
    
    try:
        # Read CSV file
        csv_data = file.read().decode('utf-8')
        
        # Enhance product listings
        enhanced_df = enhance_product_listings(csv_data, marketplace)
        
        # Convert back to CSV
        output = io.StringIO()
        enhanced_df.to_csv(output, index=False)
        
        return jsonify({
            "success": True,
            "enhanced_csv": output.getvalue(),
            "stats": {
                "rows": len(enhanced_df),
                "columns": len(enhanced_df.columns),
                "fields_added": len(enhanced_df.columns) - len(csv_data.splitlines()[0].split(','))
            }
        })
    
    except Exception as e:
        return jsonify({"error": str(e)}), 500

if __name__ == '__main__':
    app.run(debug=True)
"""