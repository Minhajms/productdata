Create a web application that transforms incomplete product data into marketplace-ready listings. The application should: 1. Accept CSV file uploads containing product information 2. Identify missing required fields based on selected marketplace 3. Complete missing data using Gemini API 4. Generate SEO-optimized descriptions and titles 5. Export enhanced data in marketplace-appropriate CSV formats .Technical Architecture  Frontend (React) - Implement file upload component with drag-and-drop - Create marketplace selection dropdown (Amazon, Shopify, Etsy, eBay) - Build preview interface to review enhanced listings - Add export functionality for downloading completed listings . Backend (Python with FastAPI) - Create CSV parsing and validation service - Implement marketplace rule engine for different platforms - Build Gemini API integration for content generation - Develop export service for platform-specific formats  Key Implementation Tasks 1. CSV Processing System** - Implement robust CSV parsing with pandas - Handle various CSV formats and encodings - Create column mapping to standardized fields - Identify missing required fields for chosen marketplace 2. Marketplace Rules Engine - Build JSON configuration for each platform's requirements - Implement validation against these requirements - Create system to flag non-compliant listings - Design flexible structure for easy rule updates 3. Gemini API Integration - Implement optimised prompts for different content types: - Product descriptions - Feature lists - SEO titles - Image descriptions - Add caching to reduce API costs - Implement error handling and retry logic 4. Export System - Create template-based exporters for each platform - Ensure all required fields are populated - Validate final output meets platform requirements - Support batch exports for multiple products ## Development Steps 1. Setup project structure and environment 2. Implement basic CSV upload and parsing 3. Build marketplace rule configuration 4. Add Gemini API integration for basic content generation 5. Create preview interface for generated content 6. Implement export functionality 7. Add error handling and validation 8. Optimize performance for larger CSV files  Advanced Features (if time permits) - Image suggestion capabilities - Category-specific content optimization - Bulk processing with progress indicators - User accounts to save preferences  Testing Requirements - Test with sample CSV files from different marketplaces - Verify Gemini API output quality for different product types - Validate export format compliance with platform requirements - Test performance with larger datasets (1000+ products) Please provide a complete implementation with proper error handling, clean code organization, and detailed comments to explain your approach.